#!/usr/bin/env python
import subprocess

import re
#from ast import literal_eval
import datetime


# Because apparently, computers and time formats suck, we now requires
#   python-tz (aka pytz).
from pytz import UTC


rx = 'TimeLogEntry \{tlTime = ([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[' \
     '0-9]{2}.[0-9]{1,} UTC), tlRate = (60000), tlData = CaptureData \{' \
     'cWindows = \[(.*)\], cLastActivity = ([0-9]+)(, cDesktop = \".*\")?\}\}'

monthfilter = 'TimeLogEntry \{tlTime = (%s-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{1,} UTC), tlRate = (60000), tlData = CaptureData \{cWindows = \[(.*)\], cLastActivity = ([0-9]+)\}\}' % datetime.datetime.now().strftime("%Y-%m")
monthfilter = re.compile(monthfilter)

THRESHOLD=1800000 # minutes in miliseconds. after that time of no activity, we assume there's a break (e.g. lunch or when taking a few hours off between finishing work and a late meeting)

class GMT1(datetime.tzinfo):
    def utcoffset(self, dt):
        return datetime.timedelta(hours=1) + self.dst(dt)
    def dst(self, dt):
        # DST starts last Sunday in March
        d = datetime.datetime(dt.year, 4, 1)   # ends last Sunday in October
        self.dston = d - datetime.timedelta(days=d.weekday() + 1)
        d = datetime.datetime(dt.year, 11, 1)
        self.dstoff = d - datetime.timedelta(days=d.weekday() + 1)
        if self.dston <=  dt.replace(tzinfo=None) < self.dstoff:
            return datetime.timedelta(hours=1)
        else:
            return datetime.timedelta(0)
    def tzname(self,dt):
        return "GMT +1"


def get_lines():
    ' yield per line from arbtt-dump output'
    proc = subprocess.Popen(['arbtt-dump', '--format=Show'],stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.readline()
        if line != '':
            # Filter for last 2 weeks
            #if monthfilter.match(line):
            yield line
        else:
            break

def parse_line_to_time():
    ' return the current time for every instance (when I\'m not too idle) '
    for line in get_lines():
        match= re.match(rx, line)
        try:
            tlTime = match.group(1)
        except Exception, e:
            print e
            print repr(line)
        #tlRate = match.group(2)
        #cWindows = literal_eval(match.group(3)) # bam! now we haz tuple.
        cLastActivity = int(match.group(4))
        yield (tlTime, cLastActivity)

def reduce_to_day():
    ' yields a dictionary for every session of uninterrupted working (interrupt timing set in THRESHOLD '      #TODO try to locate breaks and return them as negative somethings.. :D
    dic = {}
    prevday = ""
    prevdt = ""
    #NOTE: we heavily rely on the fact that things are in order (i.e. appended to the log)
    day=''
    pause = False
    for t, cLA in parse_line_to_time():
        dt = datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S.%f %Z")

        #today = datetime.datetime.now()
        #if (today - dt) > datetime.timedelta(weeks=2): # should be 14- (day_of_week)days
        #	continue

        dt = UTC.localize(dt) # make it aware of being in a timezone (it's UTC)
        dt = dt.astimezone(GMT1()) # move it to GMT+1, so we show the right time.... -.-
        curday = t.split()[0]


        if not day.startswith(curday): # new day
            day = dt.strftime("%Y-%m-%d %a")
            pause = False # We usually don't start the day with a break ;-)

        if pause and cLA < THRESHOLD:
            pause = False


        if not pause:
            if cLA > THRESHOLD:
                pause = True
                day += '_' # session suffix
                continue # next!
            else:
                if prevdt != "":
                    if (dt - prevdt).seconds*1000 > THRESHOLD: # THRESHOLD is in ms
                        day += "_" # long pause

            if not day in dic:
                if prevday != "":
                    yield dic[prevday]
                dic[day] = {'min':dt, 'max':dt, 'dt': dt}
            else:
                if dt < dic[day]['min']:
                    dic[day]['min'] = dt
                if dt > dic[day]['max']:
                    dic[day]['max'] = dt
            prevday = day
        prevdt = dt
    yield dic[prevday]  # yield the last item


def pretty_days():
    ' for each day, print a beautiful amount of hrs spent on the computer '
    s = datetime.timedelta()
    dsum = datetime.timedelta()
    this_week = None
    last_week = None
    last_day = None
    for daydict in reduce_to_day():
        prettydate = daydict['dt'].strftime("%Y-%m-%d %a")
        this_week = daydict['dt'].strftime("%U")
        this_day = daydict['dt'].strftime("%d")
        delta = daydict['max'] - daydict['min']
        prettydelta = str(delta).split(".")[0] # remove miliseconds: just for display, not for sum calculation.

        if this_day != last_day:
            d_prettyhrs =  ( int(dsum.total_seconds() / 60 / 60) )
            d_prettymins = ( int(dsum.total_seconds() / 60 % 60) )
            d_delta_to_foureightzero = ( int(dsum.total_seconds() / 60 ) - 480)
            print "\tDaily Sum:\t\t{} hrs, {} mins ({:+d} mins)".format( d_prettyhrs, d_prettymins, d_delta_to_foureightzero)
            dsum = datetime.timedelta()
        if this_week != last_week:
            prettyhrs =  ( int(s.total_seconds() / 60 / 60) )
            prettymins = ( int(s.total_seconds() / 60 % 60) )
            delta_to_fourty = ( int(s.total_seconds() / 60 / 60) -40)
            print "\tWeekly Sum:\t\t{} hrs, {} mins ({:+d} hrs)\n".format( prettyhrs, prettymins, delta_to_fourty)
            s = datetime.timedelta()
        s += delta
        dsum += delta
        print prettydate, "\t\t", prettydelta, '(', str(daydict['min']).split()[1].split(".")[0], "-", str(daydict['max']).split()[1].split(".")[0], ')'
        last_week = this_week
        last_day = this_day

    print "\tCurrent Daily Sum:\t\t", ( int(dsum.total_seconds() / 60 / 60) ), "hrs,", ( int(dsum.total_seconds() / 60 % 60) ) ,"mins"
    print "\tCurrent Weekly Sum:\t\t", ( int(s.total_seconds() / 60 / 60) ), "hrs,", ( int(s.total_seconds() / 60 % 60) ) ,"mins\n"




if __name__ == '__main__':
    pretty_days()




""" Data Sample


TimeLogEntry {tlTime = [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{4,} UTC, tlRate = 60000, tlData = CaptureData {cWindows = [.*], cLastActivity = [0-9]+}}

TimeLogEntry {tlTime = 2013-02-12 09:02:18.68866 UTC, tlRate = 60000, tlData = CaptureData
                  {cWindows = [(False,"xfce4-panel","xfce4-panel"),....], cLastActivity = 2772}}




groups:
 ('2013-02-12 09:02:18.68866 UTC',
   '60000',
    '(False,"xfce4-panel","xfce4-panel"), ...',
   '2772')

=>

 0 -> tlTime, 1 -> tlRate, 2 -> cWindows, 3 -> cLastActivity





Another bug:


2013-03-11 Mon 		5:02:05 ( 08:51:27 - 13:53:33 )
2013-03-11 Mon 		4:25:04 ( 14:44:34 - 19:09:39 ) <--- da war ne pause drin, ey!



"""
